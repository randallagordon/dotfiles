#!/bin/bash
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.symlink ]
  then
    info 'setup gitconfig'

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

setup_gitconfig
install_dotfiles

# If we are on a mac, lets install and setup homebrew
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if . bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi

  # Reclaim the Ctrl+Cmd+D hotkey from macOS's "define" feature
  defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 70 '<dict><key>enabled</key><false/></dict>'
  # Fix key repeat
  defaults write -g ApplePressAndHoldEnabled -bool false
  defaults write -g InitialKeyRepeat -int 10
  defaults write -g KeyRepeat -int 1
  # Fix dialog sizes
  defaults write com.google.Chrome NSNavPanelExpandedSizeForSaveMode -string "{900, 900}"
  # Karabiner
  ln -s ~/.dotfiles/settings/karabiner ~/.config/karabiner
fi

# Powerline Stuff
ln -s ~/.dotfiles/powerline-config ~/.config/powerline
# Byobu
ln -s ~/.dotfiles/byobu ~/.byobu

# Vim
# ln -s ~/.dotfiles/vim/vimrc ~/.vimrc # Link `vimrc` directly if not using `swim`
curl -s https://raw.githubusercontent.com/dawsonbotsford/swim/master/install | bash
swim add ~/.dotfiles/vim/vimrc dotfiles
ln -s ~/.dotfiles/vim/vimrc ~/.swim/dotfiles.vim
# `swim` does not manage `~/.vim` itself
ln -s ~/.dotfiles/vim/ ~/.vim
cd ~/.vim && git submodule init && git submodule update

# Install Tmux Plugin Manager
if ! [ -f ~/.tmux/plugins/tpm ]
then
  git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
fi

# If on macos, we need psutil for the uptime tmux segment:
sudo easy_install psutil

# VSCode
ln -s ~/.dotfiles/vscode/settings.json ~/Library/ApplicationSupport/Code/User/settings.json
ln -s ~/.dotfiles/vscode/keybindings.json ~/Library/ApplicationSupport/Code/User/keybindings.json
ln -s ~/.dotfiles/vscode/snippets/ ~/Library/ApplicationSupport/Code/User

mkdir ~/Projects
mkdir ~/Sandbox
mkdir ~/src

curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash

echo ''
echo '  All installed!'
echo ''
echo '  While in tmux, use `prefix + I` to install tmux plugins'
