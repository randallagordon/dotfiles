snippet @
this
endsnippet

snippet proto "Prototype"
${1:class_name}.prototype.${2:method_name} = function (${3:first_argument}) {
	${4:// body...}
}
endsnippet

snippet fun "Function"
function ${1:function_name} (${2:argument}) {
	${3:// body...}
}
endsnippet

snippet f "Anonymous Function"
function (${1}) {${2}}
endsnippet

snippet ff "Function with anonymous function passed in"
${1:method_name}(${2:arguments, }function (${3}) {
	${4}
})
endsnippet

snippet :f "Object Method"
${1:method_name}: function (${2:attribute}) {
	${4}
}${3:,}
endsnippet

snippet if "if"
if (${1:true}) {${2}}
endsnippet

snippet ife "if ... else"
if (${1:true}) {${2}}
else{${3}}
endsnippet

snippet t "tertiary conditional"
${1:/* condition */} ? ${2:a} : ${3:b}
endsnippet

snippet switch
switch(${1:expression}) {
	case '${3:case}':
		${4:// code}
		break
	${5}
	default:
		${2:// code}
}
endsnippet

snippet case
case '${1:case}':
	${2:// code}
	break
${3}
endsnippet

snippet for "for (...) {...}"
for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
	${4:$1[$2]}
}
endsnippet

snippet forr "for (...) {...} (Improved Native For-Loop)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
	${4:$1[$2]}
}
endsnippet

snippet wh "while (...) {...}"
while (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet

snippet do "do...while"
do {
	${2:/* code */}
} while (${1:/* condition */})
endsnippet

snippet timeout "setTimeout function"
setTimeout(function () {${3}}${2}, ${1:10}
endsnippet

snippet get "Get Elements"
getElementsBy${1:TagName}('${2}')${3}
endsnippet

snippet gett "Get Element"
getElementBy${1:Id}('${2}')${3}
endsnippet

snippet v "Variable Declaration"
var ${1:name} = ${2:value}
endsnippet

snippet cd "Console Log"
console.dir(${1}, { depth: null, colors: true })
endsnippet

snippet cl
console.log(${1})
endsnippet

snippet clm
console.log('${1}')
endsnippet

snippet clv
console.log('${1}', $1)
endsnippet

snippet yolo
console.log('yolo${1}')
endsnippet

snippet clg
console.group()
endsnippet

snippet clge
console.groupEnd()
endsnippet

snippet esld
/* eslint-disable ${1} */
endsnippet

snippet esldl
// eslint-disable-line ${1}
endsnippet

snippet esldnl
/* eslint-disable-next-line ${1} */
endsnippet
